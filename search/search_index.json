{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"processos-operacionais/pull-request/","title":"Pull request","text":""},{"location":"processos-operacionais/pull-request/#1-estrutura-das-branches-main-e-homolog","title":"1. Estrutura das Branches: <code>main</code> e <code>homolog</code>","text":""},{"location":"processos-operacionais/pull-request/#11-branch-main","title":"1.1. Branch <code>main</code>","text":"<ul> <li>Descri\u00e7\u00e3o: \u00c9 a branch principal do reposit\u00f3rio onde o c\u00f3digo est\u00e1vel e pronto para produ\u00e7\u00e3o reside.</li> <li>Fun\u00e7\u00e3o: Serve como base para lan\u00e7amentos e deve sempre refletir o estado atual do produto em produ\u00e7\u00e3o.</li> </ul>"},{"location":"processos-operacionais/pull-request/#12-branch-homolog","title":"1.2. Branch <code>homolog</code>","text":"<ul> <li>Descri\u00e7\u00e3o: Atua como uma branch de homologa\u00e7\u00e3o ou staging.</li> <li>Fun\u00e7\u00e3o: \u00c9 utilizada para testar novas funcionalidades em um ambiente que simula a produ\u00e7\u00e3o antes de integr\u00e1-las \u00e0 branch <code>main</code>.</li> <li>Fluxo de Trabalho:</li> <li>Desenvolvedores criam feature branches a partir da <code>main</code> ou da <code>homolog</code>.</li> <li>Ap\u00f3s finalizar uma funcionalidade, criam um Pull Request para a branch <code>homolog</code>.</li> <li>Ap\u00f3s testes e valida\u00e7\u00f5es na <code>homolog</code>, as mudan\u00e7as s\u00e3o promovidas para a <code>main</code>.</li> </ul>"},{"location":"processos-operacionais/pull-request/#2-processo-de-pull-request-pr","title":"2. Processo de Pull Request (PR)","text":""},{"location":"processos-operacionais/pull-request/#21-criacao-de-uma-feature-branch","title":"2.1. Cria\u00e7\u00e3o de uma Feature Branch","text":"<ol> <li>Iniciar uma Nova Branch:</li> <li>Nomea\u00e7\u00e3o: Utilize nomes descritivos, como <code>feature/nova-funcionalidade</code> ou <code>bugfix/corrige-erro</code>.</li> <li>Exemplo:      <code>bash      git checkout -b feature/adicionar-login</code></li> </ol>"},{"location":"processos-operacionais/pull-request/#22-desenvolvimento-da-funcionalidade","title":"2.2. Desenvolvimento da Funcionalidade","text":"<ul> <li>Boas Pr\u00e1ticas:</li> <li>Escrever c\u00f3digo limpo e bem documentado.</li> <li>Realizar commits pequenos e frequentes com mensagens claras.</li> <li>Escrever testes automatizados, se aplic\u00e1vel.</li> </ul>"},{"location":"processos-operacionais/pull-request/#23-criacao-do-pull-request","title":"2.3. Cria\u00e7\u00e3o do Pull Request","text":"<ol> <li> <p>Abrir um PR no GitHub:</p> </li> <li> <p>Comparar a feature branch com a branch <code>homolog</code>.</p> </li> <li>Preencher o t\u00edtulo e a descri\u00e7\u00e3o do PR com detalhes sobre as mudan\u00e7as realizadas.</li> <li> <p>Exemplo de Descri\u00e7\u00e3o:</p> <p>```  ### Descri\u00e7\u00e3o  Implementa a funcionalidade de login com autentica\u00e7\u00e3o via email e senha.</p> <p>### Tarefas  - Cria\u00e7\u00e3o do formul\u00e1rio de login  - Integra\u00e7\u00e3o com a API de autentica\u00e7\u00e3o  - Adi\u00e7\u00e3o de testes unit\u00e1rios  ```</p> </li> </ol>"},{"location":"processos-operacionais/pull-request/#24-revisao-de-codigo-code-review","title":"2.4. Revis\u00e3o de C\u00f3digo (Code Review)","text":""},{"location":"processos-operacionais/pull-request/#3-code-review-com-uso-de-codeowners","title":"3. Code Review com Uso de CODEOWNERS","text":""},{"location":"processos-operacionais/pull-request/#31-o-que-e-o-codeowners","title":"3.1. O que \u00e9 o CODEOWNERS?","text":"<ul> <li>Defini\u00e7\u00e3o: \u00c9 um arquivo especial (<code>CODEOWNERS</code>) localizado na raiz do reposit\u00f3rio que define quais membros ou equipes s\u00e3o respons\u00e1veis por revisar e aprovar mudan\u00e7as em determinadas partes do c\u00f3digo.</li> <li>Localiza\u00e7\u00e3o: Geralmente em <code>.github/CODEOWNERS</code> ou na raiz do reposit\u00f3rio.</li> </ul>"},{"location":"processos-operacionais/pull-request/#32-configuracao-do-arquivo-codeowners","title":"3.2. Configura\u00e7\u00e3o do Arquivo <code>CODEOWNERS</code>","text":"<ul> <li>Formato B\u00e1sico:</li> </ul> <p>```   # Dono para toda a base de c\u00f3digo   * @equipe-dados</p> <p># Dono para arquivos espec\u00edficos   /docs/ @documentacao   /src/components/ @frontend   ```</p> <ul> <li>Exemplo Pr\u00e1tico:</li> </ul> <p>```   # Todos os arquivos   * @dev-team</p> <p># Arquivos de documenta\u00e7\u00e3o   /docs/* @documentacao</p> <p># Componentes Frontend   /src/components/* @frontend-team   ```</p>"},{"location":"processos-operacionais/pull-request/#33-fluxo-de-code-review-com-codeowners","title":"3.3. Fluxo de Code Review com CODEOWNERS","text":"<ol> <li>Notifica\u00e7\u00e3o Autom\u00e1tica:</li> <li>Quando um PR \u00e9 criado que altera arquivos cobertos pelo <code>CODEOWNERS</code>, os respons\u00e1veis s\u00e3o automaticamente adicionados como revisores.</li> <li>Revis\u00e3o pelos Code Owners:</li> <li>Responsabilidades:<ul> <li>Verificar a qualidade do c\u00f3digo.</li> <li>Garantir que as mudan\u00e7as seguem os padr\u00f5es e as diretrizes do projeto.</li> <li>Validar a funcionalidade implementada.</li> </ul> </li> <li>Feedback e Ajustes:</li> <li>Os revisores podem solicitar mudan\u00e7as ou melhorias.</li> <li>O autor do PR deve realizar as altera\u00e7\u00f5es necess\u00e1rias e atualizar o PR.</li> </ol>"},{"location":"processos-operacionais/pull-request/#4-aprovacao-e-merge-do-pull-request","title":"4. Aprova\u00e7\u00e3o e Merge do Pull Request","text":""},{"location":"processos-operacionais/pull-request/#41-requisitos-para-o-merge","title":"4.1. Requisitos para o Merge","text":"<ul> <li>Aprova\u00e7\u00f5es M\u00ednimas:</li> <li>\u00c9 necess\u00e1rio que pelo menos dois revisores aprovem o PR antes que ele possa ser mesclado.</li> <li>Resolu\u00e7\u00e3o de Conflitos:</li> <li>Todos os conflitos entre a branch de origem (<code>feature</code>) e a branch de destino (<code>homolog</code>) devem ser resolvidos antes do merge.</li> <li>Como Resolver Conflitos:<ol> <li>Atualizar a Feature Branch com a \u00daltima Vers\u00e3o da Branch de Destino: <code>bash    git checkout feature/adicionar-login    git fetch origin    git merge origin/homolog</code></li> <li>Resolver os Conflitos Manualmente:</li> <li>Abrir os arquivos com conflitos.</li> <li>Decidir quais mudan\u00e7as manter.</li> <li>Marcar os conflitos resolvidos.</li> <li>Finalizar o Merge: <code>bash    git add .    git commit -m \"Resolve conflitos entre homolog e feature/adicionar-login\"    git push origin feature/adicionar-login</code></li> </ol> </li> </ul>"},{"location":"processos-operacionais/pull-request/#42-realizar-o-merge","title":"4.2. Realizar o Merge","text":"<ol> <li>Ap\u00f3s as Aprova\u00e7\u00f5es e Resolu\u00e7\u00e3o dos Conflitos:</li> <li>O autor do PR ou um membro autorizado pode clicar em \"Merge pull request\" no GitHub.</li> <li>Escolher o Tipo de Merge:</li> <li>Merge Commit: Mant\u00e9m o hist\u00f3rico completo do branch.</li> <li>Squash and Merge: Combina todos os commits do PR em um \u00fanico commit na branch de destino.</li> <li>Rebase and Merge: Reescreve o hist\u00f3rico para linearizar os commits.</li> </ol>"},{"location":"processos-operacionais/pull-request/#43-pos-merge","title":"4.3. P\u00f3s-Merge","text":"<ul> <li>Atualiza\u00e7\u00e3o das Branches:</li> <li>A branch <code>homolog</code> agora inclui as mudan\u00e7as aprovadas.</li> <li>Eventualmente, as mudan\u00e7as s\u00e3o promovidas para a branch <code>main</code> ap\u00f3s testes finais.</li> </ul>"},{"location":"processos-operacionais/pull-request/#5-incentivando-um-bom-code-review","title":"5. Incentivando um Bom Code Review","text":""},{"location":"processos-operacionais/pull-request/#51-beneficios-de-um-bom-code-review","title":"5.1. Benef\u00edcios de um Bom Code Review","text":"<ul> <li>Qualidade do C\u00f3digo: Identifica\u00e7\u00e3o e corre\u00e7\u00e3o de bugs antes que cheguem \u00e0 produ\u00e7\u00e3o.</li> <li>Padroniza\u00e7\u00e3o: Garantia de que todos seguem os padr\u00f5es e diretrizes do projeto.</li> <li>Compartilhamento de Conhecimento: Membros da equipe aprendem uns com os outros, aumentando a coes\u00e3o e a capacidade coletiva.</li> <li>Manuten\u00e7\u00e3o: Facilita a manuten\u00e7\u00e3o futura do c\u00f3digo, pois mais olhos revisaram e entenderam as mudan\u00e7as.</li> </ul>"},{"location":"processos-operacionais/pull-request/#52-boas-praticas-para-code-review","title":"5.2. Boas Pr\u00e1ticas para Code Review","text":"<ol> <li>Clareza na Comunica\u00e7\u00e3o:</li> <li>Fornecer feedback construtivo e espec\u00edfico.</li> <li>Evitar cr\u00edticas pessoais; focar no c\u00f3digo e n\u00e3o no autor.</li> <li>Revis\u00f5es Regulares e Oportunas:</li> <li>Responder aos PRs rapidamente para n\u00e3o atrasar o fluxo de trabalho.</li> <li>Foco nos Detalhes:</li> <li>Verificar n\u00e3o apenas a funcionalidade, mas tamb\u00e9m a legibilidade, performance e seguran\u00e7a do c\u00f3digo.</li> <li>Uso de Ferramentas e Integra\u00e7\u00f5es:</li> <li>Utilizar ferramentas de linting e an\u00e1lise est\u00e1tica para complementar o code review manual.</li> <li>Documenta\u00e7\u00e3o:</li> <li>Garantir que as mudan\u00e7as estejam bem documentadas, tanto no c\u00f3digo quanto na documenta\u00e7\u00e3o do projeto.</li> <li>Respeito \u00e0s Regras do PR:</li> <li>Seguir as diretrizes estabelecidas no processo de revis\u00e3o, como a necessidade de duas aprova\u00e7\u00f5es e a resolu\u00e7\u00e3o de conflitos.</li> </ol>"},{"location":"processos-operacionais/pull-request/#53-promovendo-uma-cultura-de-code-review","title":"5.3. Promovendo uma Cultura de Code Review","text":"<ul> <li>Treinamentos e Workshops:</li> <li>Realizar sess\u00f5es de treinamento para ensinar as melhores pr\u00e1ticas de code review.</li> <li>Feedback Cont\u00ednuo:</li> <li>Encorajar a equipe a fornecer e receber feedback de forma positiva e construtiva.</li> <li>Reconhecimento:</li> <li>Reconhecer e valorizar as contribui\u00e7\u00f5es significativas durante as revis\u00f5es.</li> <li>Estabelecer Normas Claras:</li> <li>Definir claramente o que se espera durante um code review, incluindo crit\u00e9rios de aprova\u00e7\u00e3o e padr\u00f5es de c\u00f3digo.</li> </ul>"},{"location":"processos-operacionais/pull-request/#6-resumo-do-fluxo-de-trabalho","title":"6. Resumo do Fluxo de Trabalho","text":"<ol> <li> <p>Cria\u00e7\u00e3o de uma Feature Branch:</p> </li> <li> <p>Partir da branch <code>main</code> ou <code>homolog</code> para desenvolver uma nova funcionalidade ou corrigir um bug.</p> </li> <li> <p>Desenvolvimento e Commit:</p> </li> <li> <p>Desenvolver a funcionalidade com commits claros e objetivos.</p> </li> <li> <p>Cria\u00e7\u00e3o de um Pull Request:</p> </li> <li> <p>Solicitar a integra\u00e7\u00e3o das mudan\u00e7as para a branch <code>homolog</code>.</p> </li> <li> <p>Code Review com Code Owners:</p> </li> <li> <p>Os respons\u00e1veis definidos no <code>CODEOWNERS</code> revisam o PR.</p> </li> <li> <p>Necessidade de pelo menos duas aprova\u00e7\u00f5es para prosseguir.</p> </li> <li> <p>Resolu\u00e7\u00e3o de Conflitos:</p> </li> <li> <p>Garantir que a branch de origem est\u00e1 atualizada com a branch de destino e resolver quaisquer conflitos.</p> </li> <li> <p>Merge do Pull Request:</p> </li> <li> <p>Ap\u00f3s as aprova\u00e7\u00f5es e a resolu\u00e7\u00e3o de conflitos, realizar o merge para a branch <code>homolog</code>.</p> </li> <li> <p>Testes e Valida\u00e7\u00f5es:</p> </li> <li> <p>Realizar testes na branch <code>homolog</code> para garantir que tudo est\u00e1 funcionando conforme esperado.</p> </li> <li> <p>Promo\u00e7\u00e3o para a Branch <code>main</code>:</p> </li> <li>Ap\u00f3s a valida\u00e7\u00e3o na <code>homolog</code>, as mudan\u00e7as s\u00e3o promovidas para a branch <code>main</code> para serem lan\u00e7adas em produ\u00e7\u00e3o.</li> </ol>"},{"location":"processos-operacionais/pull-request/#7-exemplos-praticos","title":"7. Exemplos Pr\u00e1ticos","text":""},{"location":"processos-operacionais/pull-request/#71-exemplo-de-um-pull-request-com-code-owners","title":"7.1. Exemplo de um Pull Request com Code Owners","text":"<p>Imagine que voc\u00ea est\u00e1 adicionando uma nova funcionalidade de login ao projeto.</p> <ol> <li>Cria\u00e7\u00e3o da Branch:</li> </ol> <p><code>bash    git checkout -b feature/adicionar-login</code></p> <ol> <li> <p>Desenvolvimento e Commits:</p> </li> <li> <p>Implementa\u00e7\u00e3o do formul\u00e1rio de login.</p> </li> <li>Integra\u00e7\u00e3o com a API de autentica\u00e7\u00e3o.</li> <li> <p>Adi\u00e7\u00e3o de testes unit\u00e1rios.</p> </li> <li> <p>Cria\u00e7\u00e3o do Pull Request:</p> </li> <li> <p>Comparar <code>feature/adicionar-login</code> com <code>homolog</code>.</p> </li> <li> <p>Descri\u00e7\u00e3o detalhada das mudan\u00e7as.</p> </li> <li> <p>Revis\u00e3o pelo Code Owners:</p> </li> <li> <p>O arquivo <code>CODEOWNERS</code> define que a equipe de frontend (<code>@frontend-team</code>) \u00e9 respons\u00e1vel por revisar mudan\u00e7as em <code>/src/components/</code>.</p> </li> <li> <p>Al\u00e9m disso, a equipe de seguran\u00e7a (<code>@security-team</code>) \u00e9 respons\u00e1vel por altera\u00e7\u00f5es em <code>/src/auth/</code>.</p> </li> <li> <p>Obten\u00e7\u00e3o de Aprova\u00e7\u00f5es:</p> </li> <li> <p>Dois membros das equipes designadas revisam e aprovam o PR.</p> </li> <li> <p>Resolu\u00e7\u00e3o de Conflitos:</p> </li> <li> <p>Caso a branch <code>homolog</code> tenha sofrido mudan\u00e7as desde a cria\u00e7\u00e3o da feature branch, voc\u00ea deve atualizar sua branch e resolver quaisquer conflitos.</p> </li> <li> <p>Merge do PR:</p> </li> <li>Ap\u00f3s todas as aprova\u00e7\u00f5es e a resolu\u00e7\u00e3o dos conflitos, realizar o merge para a branch <code>homolog</code>.</li> </ol>"},{"location":"processos-operacionais/pull-request/#72-exemplo-de-arquivo-codeowners","title":"7.2. Exemplo de Arquivo <code>CODEOWNERS</code>","text":"<pre><code># Definindo donos para toda a base de c\u00f3digo\n* @dev-team\n\n# Donos espec\u00edficos para diret\u00f3rios\n/docs/ @documentacao\n/src/components/ @frontend-team\n/src/auth/ @security-team\n</code></pre>"},{"location":"processos-operacionais/pull-request/#8-ferramentas-e-integracoes-para-facilitar-o-processo","title":"8. Ferramentas e Integra\u00e7\u00f5es para Facilitar o Processo","text":""},{"location":"processos-operacionais/pull-request/#81-github-actions","title":"8.1. GitHub Actions","text":"<ul> <li>Automatiza\u00e7\u00e3o: Automatizar processos como testes, builds e deploys.</li> <li>Exemplo de Workflow para Code Review:</li> <li>Executar testes automatizados antes de solicitar a revis\u00e3o.</li> <li>Verificar o estilo do c\u00f3digo com ferramentas de linting.</li> </ul>"},{"location":"processos-operacionais/pull-request/#82-ferramentas-de-linters-e-formatadores","title":"8.2. Ferramentas de Linters e Formatadores","text":"<ul> <li>Objetivo: Garantir que o c\u00f3digo segue os padr\u00f5es estabelecidos pelo projeto.</li> <li>Exemplos:</li> <li>ESLint para JavaScript.</li> <li>Pylint para Python.</li> <li>Prettier para formata\u00e7\u00e3o de c\u00f3digo.</li> </ul>"},{"location":"processos-operacionais/pull-request/#83-integracoes-com-ides","title":"8.3. Integra\u00e7\u00f5es com IDEs","text":"<ul> <li>Benef\u00edcio: Facilitar a cria\u00e7\u00e3o de commits, PRs e a realiza\u00e7\u00e3o de code reviews diretamente na IDE.</li> <li>Exemplos:</li> <li>GitHub Extension for VS Code: Integra\u00e7\u00e3o completa com GitHub.</li> <li>JetBrains IDEs: Integra\u00e7\u00e3o nativa com GitHub.</li> </ul>"},{"location":"processos-operacionais/pull-request/#9-conclusao","title":"9. Conclus\u00e3o","text":"<p>Implementar um processo estruturado de Pull Requests com code review eficaz \u00e9 fundamental para a manuten\u00e7\u00e3o da qualidade do c\u00f3digo, a colabora\u00e7\u00e3o eficiente e o sucesso dos projetos de desenvolvimento. Utilizar ferramentas como o CODEOWNERS, exigir m\u00faltiplas aprova\u00e7\u00f5es e resolver conflitos de forma diligente s\u00e3o pr\u00e1ticas que fortalecem a integridade do c\u00f3digo e promovem um ambiente de trabalho colaborativo e produtivo.</p>"},{"location":"processos-operacionais/pull-request/#beneficios-de-seguir-este-processo","title":"Benef\u00edcios de Seguir Este Processo:","text":"<ul> <li>Qualidade e Consist\u00eancia: Garantia de que o c\u00f3digo adicionado ao projeto est\u00e1 de acordo com os padr\u00f5es estabelecidos.</li> <li>Detec\u00e7\u00e3o Precoce de Bugs: Identifica\u00e7\u00e3o e corre\u00e7\u00e3o de erros antes que cheguem \u00e0 produ\u00e7\u00e3o.</li> <li>Compartilhamento de Conhecimento: Membros da equipe aprendem uns com os outros, aumentando a compet\u00eancia coletiva.</li> <li>Redu\u00e7\u00e3o de Riscos: Menor probabilidade de introdu\u00e7\u00e3o de vulnerabilidades ou problemas cr\u00edticos no sistema.</li> </ul>"},{"location":"recursos/faq/","title":"Perguntas e Respostas (FAQ de Dados)","text":""},{"location":"recursos/faq/#1-problema-de-loading-infinito-na-hora-de-publicar-um-painel","title":"1. Problema de loading infinito na hora de publicar um painel?","text":""},{"location":"recursos/faq/#possibilidades","title":"Possibilidades:","text":"<ul> <li>Painel muito pesado;</li> <li>Query muito onerosa;</li> </ul>"},{"location":"recursos/faq/#algumas-solucoes-aplicaveis","title":"Algumas solu\u00e7\u00f5es aplicaveis:","text":"<ol> <li>Solu\u00e7\u00e3o mais r\u00e1pida:</li> <li>Clicar em cancelar e logo aparecer\u00e1 a mensagem que o painel foi atualizado.</li> </ol> <ol> <li>Certificar-se de que j\u00e1 abriu todas as abas da pasta de trabalho, de modo que ele consiga \"reconhecer\" todas as fontes.</li> </ol> <ol> <li> <ul> <li>Fazer uma copia da tabela;</li> </ul> </li> <li>Pegar a original e fazer um limit nela deixando com apenas 10 (poucas linhas);</li> <li>Tentar publicar;</li> <li>E por fim, inserir os registro na principal novamente;</li> </ol> <ol> <li> <ul> <li>Tentar otimizar os filtros, e tudo que n\u00e3o for necessario no painel remover;</li> </ul> </li> <li>Realizar as principais tratativas direto na query, assim no painel so ira refletir o resultado, e n\u00e3o o campo calculado;</li> </ol> <ol> <li>Pode n\u00e3o ser interessante mostrar uma tabela(datasource) com muitas linhas(milhares, por exemplo) no dash, mas como sugest\u00f5es de melhorias:</li> <li>N\u00e3o ter muuuitas linhas no datasource;</li> <li>Otimizar a tabela filtrando s\u00f3 os dados que precisa;</li> <li>Agregando ela na granularidade necess\u00e1ria;</li> <li>No dash filtrar tudo o que precisa, antes de publicar;</li> </ol>"}]}